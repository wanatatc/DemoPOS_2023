//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import * as dayjs from 'dayjs';

export class ExampleContollerClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @return Success
     */
    get( cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Example/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class OrderClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param page (optional) 
     * @param recordsPerPage (optional) 
     * @param column (optional) 
     * @param contain (optional) 
     * @param sortColumn (optional) 
     * @param ordering (optional) 
     * @return Success
     */
    orderGetAll(page?: number | undefined, recordsPerPage?: number | undefined, column?: string | undefined, contain?: string | undefined, sortColumn?: string | undefined, ordering?: string | undefined, cancelToken?: CancelToken | undefined): Promise<OrderResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/order?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        if (column === null)
            throw new Error("The parameter 'column' cannot be null.");
        else if (column !== undefined)
            url_ += "Column=" + encodeURIComponent("" + column) + "&";
        if (contain === null)
            throw new Error("The parameter 'contain' cannot be null.");
        else if (contain !== undefined)
            url_ += "Contain=" + encodeURIComponent("" + contain) + "&";
        if (sortColumn === null)
            throw new Error("The parameter 'sortColumn' cannot be null.");
        else if (sortColumn !== undefined)
            url_ += "SortColumn=" + encodeURIComponent("" + sortColumn) + "&";
        if (ordering === null)
            throw new Error("The parameter 'ordering' cannot be null.");
        else if (ordering !== undefined)
            url_ += "Ordering=" + encodeURIComponent("" + ordering) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOrderGetAll(_response);
        });
    }

    protected processOrderGetAll(response: AxiosResponse): Promise<OrderResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<OrderResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrderResponseDtoListServiceResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    orderCreate(body?: OrderRequestDto | undefined, cancelToken?: CancelToken | undefined): Promise<OrderWithDetailResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/order";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOrderCreate(_response);
        });
    }

    protected processOrderCreate(response: AxiosResponse): Promise<OrderWithDetailResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<OrderWithDetailResponseDtoServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrderWithDetailResponseDtoServiceResponse>(null as any);
    }

    /**
     * @return Success
     */
    orderGet(id: string, cancelToken?: CancelToken | undefined): Promise<OrderWithDetailResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/order/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOrderGet(_response);
        });
    }

    protected processOrderGet(response: AxiosResponse): Promise<OrderWithDetailResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<OrderWithDetailResponseDtoServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrderWithDetailResponseDtoServiceResponse>(null as any);
    }

    /**
     * @return Success
     */
    orderDetailGet(id: string, cancelToken?: CancelToken | undefined): Promise<OrderDetailResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/order/{id}/orderdetails";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOrderDetailGet(_response);
        });
    }

    protected processOrderDetailGet(response: AxiosResponse): Promise<OrderDetailResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<OrderDetailResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrderDetailResponseDtoListServiceResponse>(null as any);
    }

    /**
     * @return Success
     */
    orderDelete(id: string, cancelToken?: CancelToken | undefined): Promise<OrderResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/order/{id}/delete";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOrderDelete(_response);
        });
    }

    protected processOrderDelete(response: AxiosResponse): Promise<OrderResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<OrderResponseDtoServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrderResponseDtoServiceResponse>(null as any);
    }
}

export class ProductClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param page (optional) 
     * @param recordsPerPage (optional) 
     * @param column (optional) 
     * @param contain (optional) 
     * @param sortColumn (optional) 
     * @param ordering (optional) 
     * @return Success
     */
    productGroupGetAll(page?: number | undefined, recordsPerPage?: number | undefined, column?: string | undefined, contain?: string | undefined, sortColumn?: string | undefined, ordering?: string | undefined, cancelToken?: CancelToken | undefined): Promise<ProductGroupResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/productgroup?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        if (column === null)
            throw new Error("The parameter 'column' cannot be null.");
        else if (column !== undefined)
            url_ += "Column=" + encodeURIComponent("" + column) + "&";
        if (contain === null)
            throw new Error("The parameter 'contain' cannot be null.");
        else if (contain !== undefined)
            url_ += "Contain=" + encodeURIComponent("" + contain) + "&";
        if (sortColumn === null)
            throw new Error("The parameter 'sortColumn' cannot be null.");
        else if (sortColumn !== undefined)
            url_ += "SortColumn=" + encodeURIComponent("" + sortColumn) + "&";
        if (ordering === null)
            throw new Error("The parameter 'ordering' cannot be null.");
        else if (ordering !== undefined)
            url_ += "Ordering=" + encodeURIComponent("" + ordering) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductGroupGetAll(_response);
        });
    }

    protected processProductGroupGetAll(response: AxiosResponse): Promise<ProductGroupResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ProductGroupResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductGroupResponseDtoListServiceResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    productGroupCreate(body?: ProductGroupRequestDto | undefined, cancelToken?: CancelToken | undefined): Promise<ProductGroupResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/productgroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductGroupCreate(_response);
        });
    }

    protected processProductGroupCreate(response: AxiosResponse): Promise<ProductGroupResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ProductGroupResponseDtoServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductGroupResponseDtoServiceResponse>(null as any);
    }

    /**
     * @return Success
     */
    productGroupGet(id: string, cancelToken?: CancelToken | undefined): Promise<ProductGroupResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/productgroup/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductGroupGet(_response);
        });
    }

    protected processProductGroupGet(response: AxiosResponse): Promise<ProductGroupResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ProductGroupResponseDtoServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductGroupResponseDtoServiceResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    productGroupUpdate(id: string, body?: ProductGroupRequestDto | undefined, cancelToken?: CancelToken | undefined): Promise<ProductGroupResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/productgroup/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductGroupUpdate(_response);
        });
    }

    protected processProductGroupUpdate(response: AxiosResponse): Promise<ProductGroupResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ProductGroupResponseDtoServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductGroupResponseDtoServiceResponse>(null as any);
    }

    /**
     * @param page (optional) 
     * @param recordsPerPage (optional) 
     * @param column (optional) 
     * @param contain (optional) 
     * @param sortColumn (optional) 
     * @param ordering (optional) 
     * @return Success
     */
    productGroupGetAllProducts(id: string, page?: number | undefined, recordsPerPage?: number | undefined, column?: string | undefined, contain?: string | undefined, sortColumn?: string | undefined, ordering?: string | undefined, cancelToken?: CancelToken | undefined): Promise<ProductResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/productgroup/{id}/product?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        if (column === null)
            throw new Error("The parameter 'column' cannot be null.");
        else if (column !== undefined)
            url_ += "Column=" + encodeURIComponent("" + column) + "&";
        if (contain === null)
            throw new Error("The parameter 'contain' cannot be null.");
        else if (contain !== undefined)
            url_ += "Contain=" + encodeURIComponent("" + contain) + "&";
        if (sortColumn === null)
            throw new Error("The parameter 'sortColumn' cannot be null.");
        else if (sortColumn !== undefined)
            url_ += "SortColumn=" + encodeURIComponent("" + sortColumn) + "&";
        if (ordering === null)
            throw new Error("The parameter 'ordering' cannot be null.");
        else if (ordering !== undefined)
            url_ += "Ordering=" + encodeURIComponent("" + ordering) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductGroupGetAllProducts(_response);
        });
    }

    protected processProductGroupGetAllProducts(response: AxiosResponse): Promise<ProductResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ProductResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductResponseDtoListServiceResponse>(null as any);
    }

    /**
     * @return Success
     */
    productGroupDelete(id: string, cancelToken?: CancelToken | undefined): Promise<ProductGroupResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/productgroup/{id}/delete";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductGroupDelete(_response);
        });
    }

    protected processProductGroupDelete(response: AxiosResponse): Promise<ProductGroupResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ProductGroupResponseDtoServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductGroupResponseDtoServiceResponse>(null as any);
    }

    /**
     * @param page (optional) 
     * @param recordsPerPage (optional) 
     * @param column (optional) 
     * @param contain (optional) 
     * @param sortColumn (optional) 
     * @param ordering (optional) 
     * @return Success
     */
    productGetAll(page?: number | undefined, recordsPerPage?: number | undefined, column?: string | undefined, contain?: string | undefined, sortColumn?: string | undefined, ordering?: string | undefined, cancelToken?: CancelToken | undefined): Promise<ProductResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/product?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        if (column === null)
            throw new Error("The parameter 'column' cannot be null.");
        else if (column !== undefined)
            url_ += "Column=" + encodeURIComponent("" + column) + "&";
        if (contain === null)
            throw new Error("The parameter 'contain' cannot be null.");
        else if (contain !== undefined)
            url_ += "Contain=" + encodeURIComponent("" + contain) + "&";
        if (sortColumn === null)
            throw new Error("The parameter 'sortColumn' cannot be null.");
        else if (sortColumn !== undefined)
            url_ += "SortColumn=" + encodeURIComponent("" + sortColumn) + "&";
        if (ordering === null)
            throw new Error("The parameter 'ordering' cannot be null.");
        else if (ordering !== undefined)
            url_ += "Ordering=" + encodeURIComponent("" + ordering) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductGetAll(_response);
        });
    }

    protected processProductGetAll(response: AxiosResponse): Promise<ProductResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ProductResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductResponseDtoListServiceResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    productCreate(body?: ProductDto | undefined, cancelToken?: CancelToken | undefined): Promise<ProductResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/product";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductCreate(_response);
        });
    }

    protected processProductCreate(response: AxiosResponse): Promise<ProductResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ProductResponseDtoServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductResponseDtoServiceResponse>(null as any);
    }

    /**
     * @return Success
     */
    productGet(id: string, cancelToken?: CancelToken | undefined): Promise<ProductResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/product/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductGet(_response);
        });
    }

    protected processProductGet(response: AxiosResponse): Promise<ProductResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ProductResponseDtoServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductResponseDtoServiceResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    productUpdate(id: string, body?: ProductDto | undefined, cancelToken?: CancelToken | undefined): Promise<ProductResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/product/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductUpdate(_response);
        });
    }

    protected processProductUpdate(response: AxiosResponse): Promise<ProductResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ProductResponseDtoServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductResponseDtoServiceResponse>(null as any);
    }

    /**
     * @return Success
     */
    productDelete(id: string, cancelToken?: CancelToken | undefined): Promise<ProductResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/product/{id}/delete";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductDelete(_response);
        });
    }

    protected processProductDelete(response: AxiosResponse): Promise<ProductResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ProductResponseDtoServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductResponseDtoServiceResponse>(null as any);
    }
}

export interface OrderDetailRequestDto {
    productId?: string;
    quantity?: number | undefined;
    amount?: number | undefined;
}

export interface OrderDetailResponseDto {
    orderDetailId?: string;
    orderId?: string;
    productId?: string;
    productName?: string | undefined;
    thumbnail?: string | undefined;
    price?: number | undefined;
    quantity?: number | undefined;
    amount?: number | undefined;
    isActive?: boolean | undefined;
    createdByUserId?: number | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    updatedById?: number | undefined;
    updatedDate?: dayjs.Dayjs | undefined;
}

export interface OrderDetailResponseDtoListServiceResponse {
    data?: OrderDetailResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface OrderRequestDto {
    orderName?: string | undefined;
    cardId?: string | undefined;
    phoneNo?: string | undefined;
    address1?: string | undefined;
    address2?: string | undefined;
    province?: string | undefined;
    district?: string | undefined;
    subdistrict?: string | undefined;
    zipCode?: string | undefined;
    orderDetails?: OrderDetailRequestDto[] | undefined;
}

export interface OrderResponseDto {
    orderId?: string;
    orderName?: string | undefined;
    cardId?: string | undefined;
    phoneNo?: string | undefined;
    address1?: string | undefined;
    address2?: string | undefined;
    province?: string | undefined;
    district?: string | undefined;
    subdistrict?: string | undefined;
    zipCode?: string | undefined;
    amount?: number | undefined;
    subtotal?: number | undefined;
    discount?: number | undefined;
    total?: number | undefined;
    isActive?: boolean | undefined;
    createdByUserId?: number | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    updatedByUserId?: number | undefined;
    updatedDate?: dayjs.Dayjs | undefined;
}

export interface OrderResponseDtoListServiceResponse {
    data?: OrderResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface OrderResponseDtoServiceResponse {
    data?: OrderResponseDto;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface OrderWithDetailResponseDto {
    orderId?: string;
    orderName?: string | undefined;
    cardId?: string | undefined;
    phoneNo?: string | undefined;
    address1?: string | undefined;
    address2?: string | undefined;
    province?: string | undefined;
    district?: string | undefined;
    subdistrict?: string | undefined;
    zipCode?: string | undefined;
    amount?: number | undefined;
    subtotal?: number | undefined;
    discount?: number | undefined;
    total?: number | undefined;
    isActive?: boolean | undefined;
    createdByUserId?: number | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    updatedByUserId?: number | undefined;
    updatedDate?: dayjs.Dayjs | undefined;
    orderDetails?: OrderDetailResponseDto[] | undefined;
}

export interface OrderWithDetailResponseDtoServiceResponse {
    data?: OrderWithDetailResponseDto;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ProductDto {
    productGroupId?: string;
    productName?: string | undefined;
    price?: number | undefined;
    expiryDate?: dayjs.Dayjs | undefined;
    thumbnail?: string | undefined;
}

export interface ProductGroupRequestDto {
    productGroupName?: string | undefined;
}

export interface ProductGroupResponseDto {
    productGroupId?: string;
    productGroupName?: string | undefined;
    isActive?: boolean | undefined;
    createdByUserId?: number | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    updatedByUserId?: number | undefined;
    updatedDate?: dayjs.Dayjs | undefined;
}

export interface ProductGroupResponseDtoListServiceResponse {
    data?: ProductGroupResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ProductGroupResponseDtoServiceResponse {
    data?: ProductGroupResponseDto;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ProductResponseDto {
    productId?: string;
    productGroupId?: string;
    productName?: string | undefined;
    price?: number | undefined;
    expiryDate?: dayjs.Dayjs | undefined;
    thumbnail?: string | undefined;
    isActive?: boolean | undefined;
    createdByUserId?: number | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    updatedByUserId?: number | undefined;
    updatedDate?: dayjs.Dayjs | undefined;
}

export interface ProductResponseDtoListServiceResponse {
    data?: ProductResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ProductResponseDtoServiceResponse {
    data?: ProductResponseDto;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}